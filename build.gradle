plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'checkstyle'
}

group = 'parksupark'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

checkstyle {
    toolVersion = '10.21.4' // 최신 Checkstyle 버전
    configFile = file('config/checkstyle/google_checks.xml') // Checkstyle 설정 파일 경로
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

// Checkstyle 작업을 빌드 프로세스에 추가
tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required = true // XML 보고서 비활성화
        html.required = true // HTML 보고서 활성화
    }
}



// 빌드 실패를 강제화하기 위해 check 태스크에 추가
tasks.named('check').configure {
    dependsOn 'checkstyleMain', 'checkstyleTest'
}
